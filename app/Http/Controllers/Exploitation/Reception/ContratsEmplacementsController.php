<?php

namespace App\Http\Controllers\Exploitation\Reception;

use App\Events\ContratBailRegistred;
use App\Interfaces\StandardControllerInterface;
use App\Models\Exploitation\Contrat;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class ContratsEmplacementsController extends ContratController implements StandardControllerInterface
{
    public function all()
    {
        $contrats = Contrat::with('personne', 'site', 'emplacement')->isBail()->get();
        return response()->json(['contrats' => $contrats]);
    }

    public function store(Request $request)
    {
        $prospect = null;
        if ($request->mode == 0) {
            $prospect = self::InsertProspect($request);
        } else {
            Validator::make($request->all(), ['personne_id' => 'required'])->validate();
        }
        if ($request->filled('infos')) {
            Validator::make($request->all(), ['avance' => 'required'])->validate();
            foreach ($request->infos as $info) {
                $contrat = new Contrat($request->all());
                $contrat->proforma();
                $contrat->personne_id = $request->personne_id ?? $prospect->id;
                $contrat->codeGenerate();
                $contrat->debut = $info['debut'];
                $fin = new Carbon($info['fin']);
                $contrat->fin = $fin->format('Y-m-d');
                $contrat->usage = $info['usage'];
                $contrat->emplacement_id = $info['emplacement_id'];
                $contrat->save();
                ContratBailRegistred::dispatch($contrat, $request->avance);
            }
        }
        $message = "contrat(s) d'emplacement enregistré(s) avec succès.";
        return response()->json(['message' => $message]);

    }

    public function update(int $id, Request $request)
    {
        $request->validate(Contrat::bailRules());
        $contrat = Contrat::find($id);
        $contrat->update($request->all());
        $message = "Le contrat: $contrat->code, pour emplacement a été modifié avec succès.";
        return response()->json(['message' => $message]);
    }

    public function trashed()
    {
        $contrats = Contrat::with('personne', 'site', 'emplacement')->onlyTrashed()->isBail()->get();
        return response()->json(['contrats' => $contrats]);
    }

    public function show(int $id)
    {
        $contrat = Contrat::with('personne', 'site', 'emplacement')->withTrashed()->isBail()->find($id);
        return response()->json(['contrat' => $contrat]);
    }

    public function details(int $id)
    {
        $contrat = Contrat::with('personne', 'site', 'emplacement.type', 'emplacement.equipements.type')
            ->withTrashed()->isBail()->find($id);
        return response()->json(['contrat' => $contrat]);
    }
}
