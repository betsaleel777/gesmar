<?php

namespace App\Http\Controllers\Exploitation\Reception;

use App\Enums\StatusFacture;
use App\Events\ContratRegistred;
use App\Events\ContratScheduled;
use App\Events\FactureStatusChange;
use App\Interfaces\StandardControllerInterface;
use App\Models\Architecture\Emplacement;
use App\Models\Exploitation\Contrat;
use App\Models\Finance\Facture;
use Carbon\Carbon;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class ContratsEmplacementsController extends ContratController implements StandardControllerInterface
{
    public function all(): JsonResponse
    {
        $contrats = Contrat::with(['personne', 'site', 'emplacement'])->isBail()->inProcess()->get();
        return response()->json(['contrats' => $contrats]);
    }

    public function valides(): JsonResponse
    {
        $contrats = Contrat::with(['personne', 'site', 'emplacement'])->isBail()->validated()->get();
        return response()->json(['contrats' => $contrats]);
    }

    public function store(Request $request): JsonResponse
    {
        $prospect = null;
        if ($request->mode == 0) {
            $prospect = self::InsertProspect($request);
        } else {
            Validator::make($request->all(), ['personne_id' => 'required'])->validate();
        }
        if ($request->filled('infos')) {
            foreach ($request->infos as $info) {
                $contrat = new Contrat($request->all());
                $contrat->personne_id = $request->personne_id ?? $prospect?->id;
                $contrat->codeGenerate();
                $contrat->debut = $info['debut'];
                $fin = new Carbon($info['fin']);
                $contrat->fin = $fin->format('Y-m-d');
                $contrat->equipable = $info['equipable'];
                $contrat->avance = $info['avance'];
                $contrat->emplacement_id = $info['emplacement_id'];
                $contrat->auto_valid = (bool)Emplacement::findOrFail($contrat->emplacement_id)->auto;
                $contrat->save();
                $contrat->attente();
                foreach ($info['types'] as $type) {
                    $contrat->equipements()->attach($type);
                }
                (new ContratRegistred($contrat, $contrat->avance))->dispatch();
            }
        }
        $message = "contrat(s) d'emplacement enregistré(s) avec succès.";
        return response()->json(['message' => $message]);
    }

    public function update(int $id, Request $request): JsonResponse
    {
        $contrat = Contrat::findOrFail($id);
        if ($request->equipable) {
            $rules = [...Contrat::EDIT_RULES, ...['types' => 'required']];
            $request->validate($rules);
            $contrat->update($request->all());
            $contrat->equipements()->sync($request->types);
        } else {
            $request->validate(Contrat::EDIT_RULES);
            $contrat->update($request->all());
            $contrat->equipements()->sync([]);
        }
        $message = "Le contrat: $contrat->code, pour emplacement a été modifié avec succès.";
        return response()->json(['message' => $message]);
    }

    public function trashed(): JsonResponse
    {
        $contrats = Contrat::with(['personne', 'site', 'emplacement'])->onlyTrashed()->isBail()->inProcess()->get();
        return response()->json(['contrats' => $contrats]);
    }

    public function show(int $id): JsonResponse
    {
        $contrat = Contrat::with(['personne', 'site', 'emplacement', 'equipements'])->withTrashed()
            ->isBail()->find($id);
        return response()->json(['contrat' => $contrat]);
    }

    public function details(int $id): JsonResponse
    {
        $contrat = Contrat::with(['personne', 'site', 'emplacement.type', 'emplacement.abonnements.equipement', 'equipements'])
            ->withTrashed()->isBail()->find($id);
        return response()->json(['contrat' => $contrat]);
    }

    /**
     * La facture proforma est acceptée par le demandeur et le contrat peut être ordonnancer
     *
     * @param  int  $id
     * @return JsonResponse
     */
    public function toSchedule(int $id): JsonResponse
    {
        $contrat = Contrat::findOrFail($id);
        $contrat->save();
        $contrat->onValidated();
        $facture = Facture::where('contrat_id', $id)->firstOrFail();
        (new FactureStatusChange($facture, StatusFacture::FACTURE))->dispatch();
        $emplacement = Emplacement::with('type')->findOrFail($contrat->emplacement_id);
        ContratScheduled::dispatchIf((bool)$emplacement->type->auto_valid, $contrat, $emplacement);
        $message = "Le contrat de bail: $contrat->code peut désormais passer à l'ordonnancement.";
        return response()->json(['message' => $message]);
    }

    /**
     * Un versement a été effectué par le demandeur et le contrat peut passer à la signature
     *
     * @param  int  $id
     * @return JsonResponse
     */
    public function toEndorse(int $id): JsonResponse
    {
        $contrat = Contrat::findOrFail($id);
        $contrat->save();
        $contrat->endorsed();
        $facture = Facture::where('contrat_id', $id)->firstOrFail();
        $message = "Le contrat de bail: $contrat->code peut passer à la signature.";
        return response()->json(['message' => $message]);
    }

    /**
     * Le contrat est signé par le demandeur et devient ainsi valide
     *
     * @param  int  $id
     * @return JsonResponse
     */
    public function valider(int $id): JsonResponse
    {
        $contrat = Contrat::findOrFail($id);
        // TODO: attacher le fichier joint du contrat
        $contrat->save();
        $contrat->validated();
        $facture = Facture::firstWhere('contrat_id', $id);
        (new FactureStatusChange($facture, StatusFacture::UNPAID))->dispatch(); // TODO: doit d'abord vérifier si le versement solde la facture
        $message = "Le contrat de bail: $contrat->code est maintenant valide.";
        return response()->json(['message' => $message]);
    }
}
