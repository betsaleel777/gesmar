<?php

namespace App\Http\Controllers\Exploitation\Reception;

use App\Enums\StatusFacture;
use App\Events\ContratRegistred;
use App\Events\ContratScheduled;
use App\Events\FactureStatusChange;
use App\Http\Resources\Contrat\ContratListResource;
use App\Http\Resources\Contrat\ContratResource;
use App\Models\Architecture\Emplacement;
use App\Models\Exploitation\Contrat;
use App\Models\Finance\Facture;
use App\Models\Template\TermesContratEmplacement;
use Carbon\Carbon;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;

class ContratsEmplacementsController extends ContratController
{
    private function swapEmplacementContrat(Contrat $contrat): array
    {
        return [
            '$nomComplet' => $contrat->personne->nom . ' ' . $contrat->personne->prenom,
            '$telephone' => $contrat->personne->contact,
            '$siteVille' => $contrat->site->ville,
            '$siteCommune' => $contrat->site->commune,
            '$superficie' => $contrat->emplacement->superficie,
            '$codeEmplacement' => $contrat->emplacement->code,
            '$contratDepart' => $contrat->debut,
            '$contratFin' => $contrat->fin,
            '$montantCaution' => $contrat->emplacement->caution * $contrat->emplacement->loyer,
            '$dateContrat' => $contrat->created_at,
            '$professionlocataire' => $contrat->personne->profession ?? 'xxxxxxxx',
            '$adresseLocataire' => $contrat->personne->adresse ?? 'xxxxxxxx',
            '$compteLocataire' => $contrat->personne->banque ?? 'xxxxxxxx',
            '$nationalite' => $contrat->personne->nationalite ?? 'xxxxxxxx',
            '$dateNaissance' => $contrat->personne->naissance ?? 'xxxxxxxx',
            '$datenaissanceEpoux' => $contrat->personne->naissance ?? 'xxxxxxxx',
            '$nomCompletPere' => $contrat->personne->nom_complet_pere ?? 'xxxxxxxx',
            '$nomCompletMere' => $contrat->personne->nom_complet_mere ?? 'xxxxxxxx',
            '$nomCompletEpoux' => $contrat->personne->nom_complet_conjoint ?? 'xxxxxxxx',
            '$professionEpoux' => $contrat->personne->profession_conjoint ?? 'xxxxxxxx',
            '$dateLocationMariage' => $contrat->personne->date_mariage ?? 'xxxxxxxx',
            '$regimeMatrimonial' => $contrat->personne->lieu_mariage ?? 'xxxxxxxx',
        ];
    }

    public function all(): JsonResponse
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $query = Contrat::with(['personne', 'emplacement:id,code'])->isBail()->inProcess();
        $contrats = $response->allowed() ? $contrats = $query->get() : $contrats = $query->owner()->get();
        return response()->json(['contrats' => ContratListResource::collection($contrats)]);
    }

    public function getPaginate(): JsonResource
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $query = Contrat::with(['personne', 'emplacement:id,code'])->isBail()->inProcess();
        $contrats = $response->allowed() ? $contrats = $query->paginate(10) : $contrats = $query->owner()->paginate(10);
        return ContratListResource::collection($contrats);
    }

    public function getSearch(string $search): JsonResource
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $query = Contrat::with(['personne', 'emplacement:id,code'])
            ->whereRaw("DATE_FORMAT(contrats.created_at,'%d-%m-%Y') LIKE ?", "$search%")
            ->orWhere('code', 'LIKE', "%$search%")->isBail()->inProcess();
        $contrats = $response->allowed() ? $contrats = $query->paginate(10) : $query->owner()->paginate(10);
        return ContratListResource::collection($contrats);
    }

    public function getValidesPaginate(): JsonResource
    {
        $response = Gate::inspect('viewValidAny', Contrat::class);
        $query = Contrat::with(['personne', 'emplacement:id,code'])->isBail()->validated();
        $contrats = $response->allowed() ? $contrats = $query->paginate(10) : $contrats = $query->owner()->paginate(10);
        return ContratListResource::collection($contrats);
    }

    public function getValidesSearch(string $search): JsonResource
    {
        $response = Gate::inspect('viewValidAny', Contrat::class);
        $query = Contrat::with(['personne', 'emplacement:id,code'])
            ->whereRaw("DATE_FORMAT(contrats.created_at,'%d-%m-%Y') LIKE ?", "$search%")
            ->orWhere('code', 'LIKE', "%$search%")->isBail()->validated();
        $contrats = $response->allowed() ? $contrats = $query->paginate(10) : $query->owner()->paginate(10);
        return ContratListResource::collection($contrats);
    }

    public function valides(): JsonResponse
    {
        $response = Gate::inspect('viewValidAny', Contrat::class);
        $query = Contrat::with(['personne', 'emplacement:id,code'])->isBail()->validated();
        $contrats = $response->allowed() ? $contrats = $query->get() : $contrats = $query->owner()->get();
        return response()->json(['contrats' => ContratListResource::collection($contrats)]);
    }

    public function store(Request $request): JsonResponse
    {
        $prospect = null;
        if ($request->mode == 0) {
            $prospect = self::insertProspect($request);
        } else {
            Validator::make($request->all(), ['personne_id' => 'required'])->validate();
        }
        if ($request->filled('infos')) {
            $this->authorize('create', Contrat::class);
            foreach ($request->infos as $info) {
                $contrat = new Contrat($request->all());
                $contrat->personne_id = $request->personne_id ?? $prospect?->id;
                $contrat->codeGenerate();
                $contrat->debut = $info['debut'];
                $fin = new Carbon($info['fin']);
                $contrat->fin = $fin->format('Y-m-d');
                $contrat->equipable = $info['equipable'];
                $contrat->avance = $info['avance'];
                $contrat->emplacement_id = $info['emplacement_id'];
                $contrat->auto_valid = (bool) Emplacement::with('type')->find($contrat->emplacement_id)->auto;
                $contrat->save();
                $contrat->attente();
                foreach ($info['types'] as $type) {
                    $contrat->equipements()->attach($type);
                }
                ContratRegistred::dispatch($contrat, $contrat->avance);
            }
        }
        return response()->json(['message' => "contrat(s) d'emplacement enregistré(s) avec succès."]);
    }

    public function update(int $id, Request $request): JsonResponse
    {
        $contrat = Contrat::findOrFail($id);
        $this->authorize('update', $contrat);
        if ($request->equipable) {
            $rules = [ ...Contrat::EDIT_RULES, ...['types' => 'required']];
            $request->validate($rules);
            $contrat->update($request->all());
            $contrat->equipements()->sync($request->types);
        } else {
            $request->validate(Contrat::EDIT_RULES);
            $contrat->update($request->all());
            $contrat->equipements()->sync([]);
        }
        return response()->json(['message' => "Le contrat: $contrat->code, pour emplacement a été modifié avec succès."]);
    }

    public function trashed(): JsonResponse
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $query = Contrat::with(['personne', 'site', 'emplacement'])->onlyTrashed()->isBail()->inProcess();
        $contrats = $response->allowed() ? $contrats = $query->get() : $query->owner()->get();
        return response()->json(['contrats' => $contrats]);
    }

    public function show(int $id): JsonResponse
    {
        $contrat = Contrat::with(['personne', 'site', 'emplacement', 'equipements'])->isBail()->find($id);
        $this->authorize('view', $contrat);
        return response()->json(['contrat' => ContratResource::make($contrat)]);
    }

    public function getByPersonne(int $id): JsonResponse
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $query = Contrat::where('personne_id', $id)->isBail();
        $contrats = $response->allowed() ? $contrats = $query->get() : $contrats = $query->owner()->get();
        return response()->json(['contrats' => ContratResource::collection($contrats)]);
    }

    public function details(int $id): ContratResource
    {
        $contrat = Contrat::with(['personne', 'site', 'emplacement.type', 'emplacement.abonnements.equipement', 'equipements'])
            ->withTrashed()->isBail()->find($id);
        $this->authorize('view', $contrat);
        return ContratResource::make($contrat);
    }
    /**
     * La facture proforma est acceptée par le demandeur et le contrat peut être ordonnancer
     */
    public function toSchedule(int $id): JsonResponse
    {
        /** @var Contrat $contrat */
        $contrat = Contrat::find($id);
        $this->authorize('schedule', $contrat);
        if ($contrat->auto_valid) {
            ContratScheduled::dispatch($contrat);
            $message = "La demande d'emplacement: $contrat->code a été validé en contrat avec succès.";
        } else {
            $contrat->onValidated();
            $facture = Facture::where('contrat_id', $id)->first();
            $contrat->codeContratGenerate();
            FactureStatusChange::dispatch($facture, StatusFacture::FACTURE);
            $message = "Le contrat de bail: $contrat->code peut désormais passer à l'ordonnancement.";
        }
        return response()->json(['message' => $message]);
    }
    /**
     * Un versement a été effectué par le demandeur et le contrat peut passer à la signature
     */
    public function toEndorse(int $id): JsonResponse
    {
        $contrat = Contrat::findOrFail($id);
        $this->authorize('endorse', $contrat);
        $contrat->save();
        $contrat->endorsed();
        return response()->json(['message' => "Le contrat de bail: $contrat->code peut passer à la signature."]);
    }
    /**
     * Le contrat est signé par le demandeur et devient ainsi valide
     */
    public function valider(int $id): JsonResponse
    {
        $contrat = Contrat::findOrFail($id);
        $this->authorize('validate', $contrat);
        $contrat->save();
        $contrat->validate();
        $facture = Facture::firstWhere('contrat_id', $id);
        FactureStatusChange::dispatch($facture, StatusFacture::UNPAID);
        return response()->json(['message' => "Le contrat de bail: $contrat->code est maintenant valide."]);
    }

    public function print(int $id)
    {
        $terme = TermesContratEmplacement::isUsed()->first();
        if ($terme) {
            $contrat = Contrat::with('personne', 'site', 'emplacement')->findOrfail($id);
            Str::macro('swap', fn($map, $subject) => str_replace(array_keys($map), array_values($map), $subject));
            $content = Str::swap(self::swapEmplacementContrat($contrat), $terme->contenu);
            $pathStorage = createPDF($contrat->code . '.pdf', $content);
            $contrat->addMedia($pathStorage)->toMediaCollection(COLLECTION_MEDIA_CONTRAT);
            return response()->json(['path' => $contrat->getFirstMedia(COLLECTION_MEDIA_CONTRAT)->getUrl()]);
        } else {
            return response()->json(['message' => "Aucun Gabari de contrat trouvé"]);
        }
    }
}
