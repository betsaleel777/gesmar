<?php

namespace App\Http\Controllers\Exploitation\Reception;

use App\Enums\StatusFacture;
use App\Events\ContratRegistred;
use App\Events\FactureStatusChange;
use App\Http\Resources\Contrat\ContratListResource;
use App\Http\Resources\Contrat\ContratResource;
use App\Models\Exploitation\Contrat;
use App\Models\Finance\Facture;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Validator;

class ContratsAnnexesController extends ContratController
{
    /**
     * obtenir tout les contrats concernant les produits annexes
     */
    public function all(): JsonResponse
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $query = Contrat::with(['personne', 'site', 'annexe'])->isAnnexe()->inProcess();
        $response->allowed() ? $contrats = $query->get() : $contrats = $query->owner()->get();
        return response()->json(['contrats' => ContratListResource::collection($contrats)]);
    }

    public function valides(): JsonResponse
    {
        $response = Gate::inspect('viewValidAny', Contrat::class);
        $query = Contrat::with(['personne', 'site', 'annexe'])->isAnnexe()->validated();
        $response->allowed() ? $contrats = $query->get() : $contrats = $query->owner()->get();
        return response()->json(['contrats' => ContratListResource::collection($contrats)]);
    }

    public function getPaginate(): JsonResource
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $query = Contrat::with(['personne', 'site', 'annexe'])->isAnnexe()->inProcess();
        $response->allowed() ? $contrats = $query->paginate(10) : $contrats = $query->owner()->paginate(10);
        return ContratListResource::collection($contrats);
    }

    public function getValidesPaginate(): JsonResource
    {
        $response = Gate::inspect('viewValidAny', Contrat::class);
        $query = Contrat::with(['personne', 'site', 'annexe'])->isAnnexe()->validated();
        $response->allowed() ? $contrats = $query->paginate(10) : $contrats = $query->owner()->paginate(10);
        return ContratListResource::collection($contrats);
    }

    public function getSearch(string $search): JsonResource
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $query = Contrat::with(['personne', 'site', 'annexe'])->whereRaw("DATE_FORMAT(contrats.created_at,'%d-%m-%Y') LIKE ?", "$search%")
            ->orWhere('code', 'LIKE', "%$search%")->isAnnexe()->inProcess();
        $response->allowed() ? $contrats = $query->paginate(10) : $contrats = $query->owner()->paginate(10);
        return ContratListResource::collection($contrats);
    }

    public function getValidesSearch(string $search): JsonResource
    {
        $response = Gate::inspect('viewValidAny', Contrat::class);
        $query = Contrat::with(['personne', 'site', 'annexe'])->whereRaw("DATE_FORMAT(contrats.created_at,'%d-%m-%Y') LIKE ?", "$search%")
            ->orWhere('code', 'LIKE', "%$search%")->isAnnexe()->validated();
        $response->allowed() ? $contrats = $query->paginate(10) : $contrats = $query->owner()->paginate(10);
        return ContratListResource::collection($contrats);
    }

    /**
     * enregistrer un contrat
     */
    public function store(Request $request): JsonResponse
    {
        $prospect = null;
        if ($request->mode == 0) {
            $prospect = self::insertProspect($request);
        } else {
            Validator::make($request->all(), ['personne_id' => 'required'])->validate();
        }
        if ($request->filled('infos')) {
            $this->authorize('create', Contrat::class);
            foreach ($request->infos as $info) {
                $contrat = new Contrat($request->all());
                $contrat->personne_id = $request->personne_id ?? $prospect?->id;
                $contrat->codeGenerate();
                $contrat->debut = $info['debut'];
                $contrat->fin = $info['fin'];
                $contrat->annexe_id = $info['annexe_id'];
                $contrat->save();
                $contrat->attente();
                ContratRegistred::dispatch($contrat, 0, (int) $info['montant']);
            }
        }
        return response()->json(['message' => 'contrat(s) pour produit annexe enregistré(s) avec succès.']);
    }

    /**
     * modifier le contrat
     */
    public function update(int $id, Request $request): JsonResponse
    {
        $request->validate(Contrat::annexeRules());
        $contrat = Contrat::with('factures')->find($id);
        $facture = $contrat->factures->first();
        $facture->montant_annexe = $request->montant;
        $facture->save();
        $this->authorize('update', $contrat);
        $contrat->update($request->all());
        return response()->json(['message' => "Le contrat $contrat->code, pour produit annexe a été modifié avec succès."]);
    }

    /**
     * archiver un contrat
     */
    public function trashed(): JsonResponse
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $response->allowed() ? $contrats = Contrat::with(['personne', 'site', 'annexe'])->onlyTrashed()->isAnnexe()->get() :
        $contrats = Contrat::with(['personne', 'site', 'annexe'])->onlyTrashed()->owner()->isAnnexe()->get();
        return response()->json(['contrats' => ContratlistResource::collection($contrats)]);
    }

    /**
     * Voir les détails concernant un contrat
     */
    public function show(int $id): JsonResponse
    {
        $contrat = Contrat::with(['personne', 'site:id,nom', 'annexe', 'factures'])->withTrashed()->isAnnexe()->find($id);
        $this->authorize('view', $contrat);
        return response()->json(['contrat' => ContratResource::make($contrat)]);
    }

    /**
     * La facture proforma est acceptée par le demandeur et le contrat peut être ordonnancer
     */
    public function toSchedule(int $id): JsonResponse
    {
        $contrat = Contrat::find($id);
        $this->authorize('schedule', $contrat);
        $contrat->onValidated();
        $facture = Facture::where('contrat_id', $id)->firstOrFail();
        FactureStatusChange::dispatch($facture, StatusFacture::FACTURE);
        return response()->json(['message' => "Le contrat annexe: $contrat->code peut passer à l'ordonnancement."]);
    }

    /**
     * Un versement a été effectué par le demandeur et le contrat peut passer à la signature
     */
    public function toEndorse(int $id): JsonResponse
    {
        $contrat = Contrat::find($id);
        $this->authorize('endorse', $contrat);
        $contrat->save();
        $contrat->endorsed();
        return response()->json(['message' => "Le contrat annexe: $contrat->code peut passer à la signature."]);
    }

    /**
     * Le contrat est signé par le demandeur et devient ainsi valide
     */
    public function valider(int $id): JsonResponse
    {
        $contrat = Contrat::find($id);
        $this->authorize('validate', $contrat);
        // TODO: attacher le fichier joint du contrat
        $contrat->save();
        $contrat->validate();
        $facture = Facture::where('contrat_id', $id)->firstOrFail();
        FactureStatusChange::dispatch($facture, StatusFacture::UNPAID); // TODO: doit d'abord vérifier si le versement solde la facture
        return response()->json(['message' => "Le contrat annexe: $contrat->code est maintenant valide."]);
    }
}
