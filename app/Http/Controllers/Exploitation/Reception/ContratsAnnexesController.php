<?php

namespace App\Http\Controllers\Exploitation\Reception;

use App\Enums\StatusFacture;
use App\Events\ContratRegistred;
use App\Events\FactureStatusChange;
use App\Interfaces\StandardControllerInterface;
use App\Models\Exploitation\Contrat;
use App\Models\Finance\Facture;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class ContratsAnnexesController extends ContratController implements StandardControllerInterface
{
    /**
     * obtenir tout les contrats concernant les produits annexes
     *
     * @return JsonResponse
     */
    public function all(): JsonResponse
    {
        $contrats = Contrat::with(['personne', 'site', 'annexe'])->isAnnexe()->inProcess()->get();
        return response()->json(['contrats' => $contrats]);
    }

    public function valides(): JsonResponse
    {
        $contrats = Contrat::with(['personne', 'site', 'emplacement'])->isAnnexe()->validated()->get();
        return response()->json(['contrats' => $contrats]);
    }

    /**
     * enregistrer un contrat
     *
     * @param  Request  $request
     * @return JsonResponse
     */
    public function store(Request $request): JsonResponse
    {
        $prospect = null;
        if ($request->mode == 0) {
            $prospect = self::InsertProspect($request);
        } else {
            Validator::make($request->all(), ['personne_id' => 'required'])->validate();
        }
        foreach ($request->infos as $info) {
            $contrat = new Contrat($request->all());
            $contrat->personne_id = $request->personne_id ?? $prospect?->id;
            $contrat->codeGenerate();
            $contrat->debut = $info['debut'];
            $contrat->fin = $info['fin'];
            $contrat->annexe_id = $info['annexe_id'];
            $contrat->save();
            $contrat->attente();
            ContratRegistred::dispatch($contrat);
        }
        $message = 'contrat(s) pour produit annexe enregistré(s) avec succès.';
        return response()->json(['message' => $message]);
    }

    /**
     * modifier le contrat
     *
     * @param  int  $id
     * @param  Request  $request
     * @return JsonResponse
     */
    public function update(int $id, Request $request): JsonResponse
    {
        $request->validate(Contrat::annexeRules());
        $contrat = Contrat::findOrFail($id);
        $contrat->update($request->all());
        $message = "Le contrat $contrat->code, pour produit annexe a été modifié avec succès.";
        return response()->json(['message' => $message]);
    }

    /**
     * archiver un contrat
     *
     * @return JsonResponse
     */
    public function trashed(): JsonResponse
    {
        $contrats = Contrat::with(['personne', 'site', 'annexe'])->onlyTrashed()->isAnnexe()->get();
        return response()->json(['contrats' => $contrats]);
    }

    /**
     * Voir les détails concernant un contrat
     *
     * @param  int  $id
     * @return JsonResponse
     */
    public function show(int $id): JsonResponse
    {
        $contrat = Contrat::with(['personne', 'site', 'annexe'])->withTrashed()->isAnnexe()->find($id);
        return response()->json(['contrat' => $contrat]);
    }

    /**
     * La facture proforma est acceptée par le demandeur et le contrat peut être ordonnancer
     *
     * @param  int  $id
     * @return JsonResponse
     */
    public function toSchedule(int $id): JsonResponse
    {
        $contrat = Contrat::findOrFail($id);
        $contrat->OnValidated();
        $facture = Facture::where('contrat_id', $id)->firstOrFail();
        FactureStatusChange::dispatch($facture, StatusFacture::FACTURE);
        $message = "Le contrat annexe: $contrat->code peut passer à l'ordonnancement.";
        return response()->json(['message' => $message]);
    }

    /**
     * Un versement a été effectué par le demandeur et le contrat peut passer à la signature
     *
     * @param  int  $id
     * @return JsonResponse
     */
    public function toEndorse(int $id): JsonResponse
    {
        $contrat = Contrat::findOrFail($id);
        $contrat->save();
        $contrat->endorsed();
        $message = "Le contrat annexe: $contrat->code peut passer à la signature.";
        return response()->json(['message' => $message]);
    }

    /**
     * Le contrat est signé par le demandeur et devient ainsi valide
     *
     * @param  int  $id
     * @return JsonResponse
     */
    public function valider(int $id): JsonResponse
    {
        $contrat = Contrat::findOrFail($id);
        // TODO: attacher le fichier joint du contrat
        $contrat->save();
        $contrat->validated();
        $facture = Facture::where('contrat_id', $id)->firstOrFail();
        FactureStatusChange::dispatch($facture, StatusFacture::UNPAID); // TODO: doit d'abord vérifier si le versement solde la facture
        $message = "Le contrat annexe: $contrat->code est maintenant valide.";
        return response()->json(['message' => $message]);
    }
}
