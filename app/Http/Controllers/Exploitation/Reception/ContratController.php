<?php

namespace App\Http\Controllers\Exploitation\Reception;

use App\Http\Controllers\Controller;
use App\Http\Resources\Contrat\ContratListResource;
use App\Http\Resources\Contrat\ContratResource;
use App\Http\Resources\Contrat\ContratSelectResource;
use App\Models\Exploitation\Contrat;
use App\Models\Exploitation\Personne;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Validator;

class ContratController extends Controller
{
    public function all(): JsonResponse
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $response->allowed() ? $contrats = Contrat::with(['site', 'personne'])->get() :
            $contrats = Contrat::with(['site', 'personne'])->owner(Auth::user()->id)->get();
        return response()->json(['contrats' => ContratResource::collection($contrats)]);
    }

    public function show(int $id): JsonResponse
    {
        $contrat = Contrat::with('personne', 'site', 'annexe', 'emplacement', 'equipements')->find($id);
        $this->authorize('view', $contrat);
        return response()->json(['contrat' => ContratResource::make($contrat)]);
    }

    protected static function insertProspect(Request $request): Personne
    {
        $rulesProspect = [
            'nom' => 'required|max:60',
            'prenom' => 'required|max:255',
            'adresse' => 'required|max:255',
            'contact' => 'required|max:20',
            'email' => 'nullable|email',
            'ville' => 'required|max:80',
        ];
        Validator::make($request->prospect, $rulesProspect)->validate();
        $personne = new Personne($request->prospect);
        $personne->codeGenerate();
        $personne->site_id = $request->site_id;
        $personne->save();
        $personne->prospect();
        return $personne;
    }

    public function trash(int $id): JsonResponse
    {
        $contrat = Contrat::findOrFail($id);
        $this->authorize('delete', $contrat);
        $contrat->delete();
        return response()->json(['message' => "Le contrat $contrat->code a été supprimé avec succès."]);
    }

    public function restore(int $id): JsonResponse
    {
        $contrat = Contrat::withTrashed()->find($id);
        $this->authorize('restore', $contrat);
        $contrat->restore();
        return response()->json(['message' => "Le contrat $contrat->code a été restauré avec succès."]);
    }

    public function schedulableContrats(): JsonResponse
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $query = Contrat::with(['personne', 'site', 'emplacement', 'annexe'])->schedulable()->notuptodate();
        $contrats = $response->allowed() ? $query->get() : $query->owner()->get();
        return response()->json(['contrats' => ContratSelectResource::collection($contrats)]);
    }

    public function contratByPerson(int $id): JsonResponse
    {
        $response = Gate::inspect('viewAny', Contrat::class);
        $query = $contrats = Contrat::with('personne', 'site', 'emplacement', 'annexe')->where('personne_id', $id);
        $contrats = $response->allowed() ? $query->get() : $query->owner()->get();
        return response()->json(['contrats' => ContratListResource::collection($contrats)]);
    }
}
