<?php

namespace App\Http\Controllers\Exploitation\Reception;

use App\Http\Controllers\Controller;
use App\Http\Resources\Ordonnancement\OrdonnancementListeResource;
use App\Http\Resources\Ordonnancement\OrdonnancementResource;
use App\Models\Exploitation\Ordonnancement;
use App\Models\Exploitation\Paiement;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;
use Illuminate\Support\Facades\Gate;

class OrdonnancementController extends Controller
{
    public function all(): JsonResponse
    {
        $response = Gate::inspect('viewAny', Ordonnancement::class);
        $query = Ordonnancement::with(['contrat' => ['personne', 'emplacement', 'annexe']]);
        $ordonnancements = $response->allowed() ? $query->get() : $query->owner()->get();
        return response()->json(['ordonnancements' => OrdonnancementListeResource::collection($ordonnancements)]);
    }

    public function getPaginate(): JsonResource
    {
        $response = Gate::inspect('viewAny', Ordonnancement::class);
        $query = Ordonnancement::with(['contrat' => ['personne', 'emplacement', 'annexe']]);
        $ordonnancements = $response->allowed() ? $query->paginate(10) : $query->owner()->paginate(10);
        return OrdonnancementListeResource::collection($ordonnancements);
    }

    public function getSearch(string $search): JsonResource
    {
        $response = Gate::inspect('viewAny', Ordonnancement::class);
        $query = Ordonnancement::with(['contrat' => ['personne', 'emplacement', 'annexe']])
            ->whereRaw("DATE_FORMAT(ordonnancements.created_at,'%d-%m-%Y') LIKE ?", "$search%")
            ->orWhere('code', 'LIKE', "%$search%");
        $ordonnancements = $response->allowed() ? $query->paginate(10) : $query->owner()->paginate(10);
        return OrdonnancementListeResource::collection($ordonnancements);
    }

    public function unpaids(): JsonResponse
    {
        $response = Gate::inspect('viewAny', Ordonnancement::class);
        $query = Ordonnancement::with(['contrat.personne', 'contrat.emplacement', 'contrat.annexe'])->unpaid();
        $ordonnancements = $response->allowed() ? $query->get() : $query->owner()->get();
        return response()->json(['ordonnancements' => OrdonnancementResource::collection($ordonnancements)]);
    }

    public function store(Request $request): JsonResponse
    {
        $this->authorize('create', Ordonnancement::class);
        $ordonnancement = new Ordonnancement($request->all());
        $ordonnancement->codeGenerate();
        $ordonnancement->save();
        $ordonnancement->impayer();
        foreach ($request->paiements as $payment) {
            $paiement = new Paiement();
            $paiement->ordonnancement_id = $ordonnancement->id;
            $paiement->facture_id = $payment['id'];
            $paiement->montant = $payment['montant'];
            $paiement->save();
        }
        return response()->json(['message' => "L'ordonnancement $ordonnancement->code a été enregistré avec succès."]);
    }

    public function show(int $id): JsonResponse
    {
        $ordonnancement = Ordonnancement::with(['contrat', 'personne', 'emplacement', 'annexe', 'paiements.facture'])->find($id);
        $this->authorize('view', $ordonnancement);
        return response()->json(['ordonnancement' => OrdonnancementResource::make($ordonnancement)]);
    }
}
