<?php

namespace App\Http\Controllers\Exploitation\Maintenance;

use App\Http\Controllers\Controller;
use App\Http\Requests\ReparationRequest;
use App\Http\Resources\Maintenance\ReparationListResource;
use App\Http\Resources\Maintenance\ReparationShowResource;
use App\Models\Exploitation\Reparation;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\JsonResponse;

class ReparationController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(): JsonResponse
    {
        $reparations = Reparation::with(['emplacement' => fn(Builder $query): Builder => $query->select('id', 'code')])
            ->without('emplacement.type')->get();
        return response()->json(['reparations' => ReparationListResource::collection($reparations)]);
    }

    /**
     * Display a listing of the resource paginated.
     */
    public function getPaginate(): JsonResponse
    {
        $reparations = Reparation::with(['emplacement' => fn(Builder $query): Builder => $query->select('id', 'code')])
            ->without('emplacement.type')->paginate(10);
        return response()->json(['reparations' => ReparationListResource::collection($reparations)]);
    }

    /**
     * Display a listing of the resource paginated.
     */
    public function getSearch(string $search): JsonResponse
    {
        $reparations = Reparation::with(['emplacement' => fn(Builder $query): Builder => $query->select('id', 'code')])
            ->without('emplacement.type')->where('created_at', 'LIKE', "%$search")
            ->orWhereHas('emplacement', fn(Builder $query): Builder => $query->where('code', 'LIKE', "%$search%"))
            ->paginate(10);
        return response()->json(['reparations' => ReparationListResource::collection($reparations)]);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(ReparationRequest $request): JsonResponse
    {
        $reparation = Reparation::make($request->validated());
        $reparation->codeGenerate();
        if ($request->has('image_first')) {
            $reparation->addMediaFromRequest('image_first')->toMediaCollection('first');
        }
        if ($request->has('image_second')) {
            $reparation->addMediaFromRequest('image_second')->toMediaCollection('second');
        }
        $reparation->save();
        return response()->json();
    }

    /**
     * Display the specified resource.
     */
    public function show(Reparation $reparation): JsonResponse
    {
        $reparation->load('emplacement', 'first', 'second');
        return response()->json(['reparation' => ReparationShowResource::make($reparation)]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(ReparationRequest $request, Reparation $reparation): JsonResponse
    {
        return response()->json();
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Reparation $reparation): JsonResponse
    {
        return response()->json();
    }
}
