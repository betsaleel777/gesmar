<?php

namespace App\Http\Controllers\Exploitation\Maintenance;

use App\Http\Controllers\Controller;
use App\Http\Requests\ReparationRequest;
use App\Http\Resources\Maintenance\ReparationListResource;
use App\Http\Resources\Maintenance\ReparationShowResource;
use App\Models\Exploitation\Reparation;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Resources\Json\JsonResource;

class ReparationController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(): JsonResponse
    {
        $reparations = Reparation::with([
            'emplacement' => fn($query) => $query->select('id', 'code')->without('type'),
            'site' => fn($query) => $query->select('id', 'nom'),
        ])->get();
        return response()->json(['reparations' => ReparationListResource::collection($reparations)]);
    }

    /**
     * Display a listing of the resource paginated.
     */
    public function getPaginate(): JsonResource
    {
        $reparations = Reparation::select('id', 'code', 'titre', 'created_at', 'site_id', 'emplacement_id', 'status')->with([
            'emplacement' => fn($query) => $query->select('id', 'code')->without('type'),
            'site' => fn($query) => $query->select('id', 'nom'),
        ])->paginate(10);
        return ReparationListResource::collection($reparations);
    }

    /**
     * Display a listing of the resource paginated with search parameter.
     */
    public function getSearch(string $search): JsonResource
    {
        $reparations = Reparation::select('id', 'code', 'titre', 'created_at', 'site_id', 'emplacement_id', 'status')->with([
            'emplacement' => fn($query) => $query->select('id', 'code')->without('type'),
            'site' => fn($query) => $query->select('id', 'nom'),
        ])->whereRaw("DATE_FORMAT(reparations.created_at,'%d-%m-%Y') LIKE ?", "$search%")
            ->orWhere('status', 'LIKE', "%$search%")
            ->orWhereHas('emplacement', fn(Builder $query) => $query->where('code', 'LIKE', "%$search%"))
            ->paginate(10);
        return ReparationListResource::collection($reparations);
    }

    /**
     * Display a listing of the resource paginated and deleted.
     */
    public function getPaginateTrashed(): JsonResource
    {
        $reparations = Reparation::select('id', 'code', 'titre', 'created_at', 'site_id', 'emplacement_id', 'status')->with([
            'emplacement' => fn($query) => $query->select('id', 'code')->without('type'),
            'site' => fn($query) => $query->select('id', 'nom'),
        ])->onlyTrashed()->paginate(10);
        return ReparationListResource::collection($reparations);
    }

    /**
     * Display a listing of the resource paginated and trashed with search parameter.
     */
    public function getSearchTrashed(string $search): JsonResource
    {
        $reparations = Reparation::select('id', 'code', 'titre', 'created_at', 'site_id', 'emplacement_id', 'status')->with([
            'emplacement' => fn($query) => $query->select('id', 'code')->without('type'),
            'site' => fn($query) => $query->select('id', 'nom'),
        ])->whereRaw("DATE_FORMAT(reparations.created_at,'%d-%m-%Y') LIKE ?", "$search%")
            ->orWhere('status', 'LIKE', "%$search%")
            ->orWhereHas('emplacement', fn(Builder $query) => $query->where('code', 'LIKE', "%$search%"))
            ->onlyTrashed()->paginate(10);
        return ReparationListResource::collection($reparations);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(ReparationRequest $request): JsonResponse
    {
        $reparation = Reparation::make($request->validated());
        $reparation->codeGenerate();
        if ($request->hasFile('image_first')) {
            $reparation->addMediaFromRequest('image_first')->toMediaCollection('first');
        }
        if ($request->hasFile('image_second')) {
            $reparation->addMediaFromRequest('image_second')->toMediaCollection('second');
        }
        $reparation->save();
        return response()->json(['message' => "La réparation a été $reparation->code a été crée avec succès."]);
    }

    /**
     * Display the specified resource.
     */
    public function show(Reparation $reparation): JsonResponse
    {
        $reparation->load('emplacement', 'first', 'second');
        return response()->json(['reparation' => ReparationShowResource::make($reparation)]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(ReparationRequest $request, Reparation $reparation): JsonResponse
    {
        return response()->json();
    }
    /**
     * Restore the specified resource from storage.
     */
    public function restore(int $id): JsonResponse
    {
        $reparation = Reparation::withTrashed()->find($id);
        $reparation->restore();
        return response()->json(['message' => "La réparation  $reparation->code a été restaurée avec succès."]);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Reparation $reparation): JsonResponse
    {
        $reparation->delete();
        return response()->json(['message' => "La réparation  $reparation->code a été archivée avec succès."]);
    }
}
