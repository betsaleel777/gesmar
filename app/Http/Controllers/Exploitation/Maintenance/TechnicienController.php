<?php

namespace App\Http\Controllers\Exploitation\Maintenance;

use App\Http\Controllers\Controller;
use App\Http\Requests\TechnicienRequest;
use App\Http\Resources\Maintenance\TechnicienListResource;
use App\Http\Resources\Maintenance\TechnicienSelectResource;
use App\Models\Exploitation\Technicien;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Resources\Json\JsonResource;

class TechnicienController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(): JsonResponse
    {
        $techniciens = Technicien::with('site')->get();
        return response()->json(['techniciens' => $techniciens]);
    }

    /**
     * Display a listing of the resource for select and dropdown.
     */
    public function getSelect(): JsonResponse
    {
        $techniciens = Technicien::select('id', 'nom', 'code')->get();
        return response()->json(['techniciens' => TechnicienSelectResource::collection($techniciens)]);
    }

    /**
     * Display a listing of the resource paginated.
     */
    public function getPaginate(): JsonResource
    {
        $techniciens = Technicien::with(['site' => fn(Builder $query) => $query->select('id', 'nom')])->paginate(10);
        return TechnicienListResource::collection($techniciens);
    }

    /**
     * Display a listing of the trashed resource paginated.
     */
    public function getPaginateTrashed(): JsonResource
    {
        $techniciens = Technicien::with(['site' => fn(Builder $query) => $query->select('id', 'nom')])->onlyTrashed()->paginate(10);
        return TechnicienListResource::collection($techniciens);
    }

    /**
     * Display a listing of resource with search parameter.
     */
    public function getSearch(string $search): JsonResource
    {
        $techniciens = Technicien::with(['site' => fn(Builder $query) => $query->select('id', 'nom')])
            ->whereRaw("DATE_FORMAT(techniciens.created_at,'%d-%m-%Y') LIKE ?", "$search%")
            ->orWhere('nom_complet', 'LIKE', "%$search%")
            ->orWhereHas('site', fn(Builder $query): Builder => $query->where('nom', 'LIKE', "%$search%"))->paginate(10);
        return TechnicienListResource::collection($techniciens);
    }

    /**
     * Display a listing of trashed resource with search parameter.
     */
    public function getSearchTrashed(string $search): JsonResource
    {
        $techniciens = Technicien::with(['site' => fn(Builder $query) => $query->select('id', 'nom')])
            ->whereRaw("DATE_FORMAT(techniciens.created_at,'%d-%m-%Y') LIKE ?", "$search%")
            ->orWhere('nom_complet', 'LIKE', "%$search%")
            ->orWhereHas('site', fn(Builder $query): Builder => $query->where('nom', 'LIKE', "%$search%"))
            ->onlyTrashed()->paginate(10);
        return TechnicienListResource::collection($techniciens);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(TechnicienRequest $request)
    {
        $request->validate();
        $technicien = Technicien::make($request->all());
        $technicien->codeGenerate();
        $technicien->save();
        return response()->json(['message' => "Le technicien $technicien->nom_complet a été crée avec succès."]);
    }

    /**
     * Display the specified resource.
     */
    public function show(Technicien $technicien)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(TechnicienRequest $request, Technicien $technicien)
    {
        $request->validate();
        $technicien->update($request->all());
        return response()->json(['message' => "Le technicien $technicien->code a bien été modifié"]);
    }

    /**
     * Restore the specified resource from storage.
     */
    public function restore(int $id): JsonResponse
    {
        $technicien = Technicien::withTrashed()->find($id);
        $technicien->restore();
        return response()->json(['message' => "Le technicien  $technicien->nom_complet a été restauré avec succès."]);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Technicien $technicien)
    {
        $technicien->delete();
        return response()->json(['message' => "Le technicien $technicien->nom_complet a été archivé avec succès."]);
    }
}
