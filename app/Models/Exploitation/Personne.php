<?php

namespace App\Models\Exploitation;

use App\Models\Architecture\Site;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * @mixin IdeHelperPersonne
 */
class Personne extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'nom', 'code', 'prenom', 'adresse', 'ville', 'contact', 'email', 'type_personne_id', 'site_id', 'prospect',
        'numero_compte', 'banque', 'lieu_naissance', 'profession', 'naissance', 'nationalite', 'nom_complet_conjoint',
        'naissance_conjoint', 'date_mariage', 'lieu_mariage', 'regime',
    ];

    protected $appends = ['nomComplet'];

    const RULES = [
        'nom' => 'required|max:60',
        'prenom' => 'required|max:255',
        'adresse' => 'required|max:255',
        'contact' => 'required|max:20',
        'email' => 'nullable|email',
        'ville' => 'required|max:80',
        'site_id' => 'required',
    ];

    public static function edit_rules($id)
    {
        return [
            'nom' => 'required|max:60',
            'prenom' => 'required|max:255',
            'adresse' => 'required|max:255',
            'contact' => 'required|max:20',
            'email' => 'nullable|email',
            'ville' => 'required|max:255',
            'site_id' => 'required',
        ];
    }

    /**
     * Undocumented function
     *
     * @return Attribute{get:(callable(): string)}
     */
    protected function nomComplet(): Attribute
    {
        return new Attribute(
            get:fn() => $this->attributes['nom'] . ' ' . $this->attributes['prenom'],
        );
    }

    public function codeGenerate(): void
    {
        $rang = $this->get()->count() + 1;
        $this->attributes['code'] = 'PER' . str_pad($rang, 7, '0', STR_PAD_LEFT);
    }

    public function lead(): void
    {
        $this->attributes['prospect'] = true;
    }

    public function client(): void
    {
        $this->attributes['prospect'] = false;
    }

    //scopes
    /**
     * Undocumented function
     *
     * @param Builder<Personne> $query
     * @return Builder<Personne>
     */
    public function scopeIsLead(Builder $query): Builder
    {
        return $query->where('prospect', true);
    }

    /**
     * Undocumented function
     *
     * @param Builder<Personne> $query
     * @return Builder<Personne>
     */
    public function scopeIsClient(Builder $query): Builder
    {
        return $query->where('prospect', false);
    }

    // relations
    /**
     * Undocumented function
     *
     * @return BelongsTo<Site>
     */
    public function site(): BelongsTo
    {
        return $this->belongsTo(Site::class);
    }

    /**
     * Undocumented function
     *
     * @return HasMany<int, Collection<int,Contrat>>
     */
    public function contrats(): HasMany
    {
        return $this->hasMany(Contrat::class);
    }

    /**
     * Undocumented function
     *
     * @return BelongsTo<TypePersonne>
     */
    public function type(): BelongsTo
    {
        return $this->belongsTo(TypePersonne::class, 'type_personne_id');
    }
}
