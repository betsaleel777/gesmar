<?php

namespace App\Models\Exploitation;

use App\Enums\StatusPersonne;
use App\Traits\HasContrats;
use App\Traits\HasSites;
use App\Traits\RecentOrder;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\SoftDeletes;
use Spatie\ModelStatus\HasStatuses;

/**
 * @mixin IdeHelperPersonne
 */
class Personne extends Model
{
    use HasFactory, SoftDeletes, HasStatuses, HasSites, HasContrats, RecentOrder;

    protected $fillable = [
        'nom', 'code', 'prenom', 'adresse', 'ville', 'contact', 'email', 'type_personne_id', 'site_id', 'prospect',
        'numero_compte', 'banque', 'lieu_naissance', 'profession', 'naissance', 'nationalite', 'nom_complet_conjoint',
        'naissance_conjoint', 'date_mariage', 'lieu_mariage', 'regime',
    ];
    /**
     *
     * @var array<int, string>
     */
    protected $appends = ['alias', 'complet', 'status'];

    public const RULES = [
        'nom' => 'required|max:60',
        'prenom' => 'required|max:255',
        'adresse' => 'required|max:255',
        'contact' => 'required|max:20',
        'email' => 'nullable|email',
        'ville' => 'required|max:80',
        'site_id' => 'required',
    ];

    public const EDIT_RULES = [
        'nom' => 'required|max:60',
        'prenom' => 'required|max:255',
        'adresse' => 'required|max:255',
        'contact' => 'required|max:20',
        'email' => 'nullable|email',
        'ville' => 'required|max:255',
        'site_id' => 'required',
    ];

    /**
     * savoir si le dossier de la personne est complet ou incomplet
     *
     * @return Attribute<string, never>
     */
    protected function complet(): Attribute
    {
        $condition = !empty($this->attributes['nationalite']) and !empty($this->attributes['naissance']) and
        !empty($this->attributes['lieu_naissance']) and !empty($this->attributes['profession']) and
        !empty($this->attributes['banque']);
        return Attribute::make(
            get:fn() => $condition,
        );
    }

    /**
     *
     * @return Attribute<string, never>
     */
    protected function alias(): Attribute
    {
        return Attribute::make(
            get:fn() => $this->attributes['nom'] . ' ' . $this->attributes['prenom'] . ' (' . $this->attributes['code'] . ')',
        );
    }

    public function codeGenerate(): void
    {
        $rang = $this->count() + 1;
        $this->attributes['code'] = PERSONNE_CODE_PREFIXE . str_pad((string) $rang, 7, '0', STR_PAD_LEFT);
    }

    public function prospect(): void
    {
        $this->setStatus(StatusPersonne::PROSPECT->name);
    }

    public function client(): void
    {
        $this->setStatus(StatusPersonne::CLIENT->name);
    }

    //scopes

    /**
     * Obtenir les prospects
     *
     * @param Builder<Personne> $query
     * @return Builder<Personne>
     */
    public function scopeIsProspect(Builder $query): Builder
    {
        return $query->currentStatus(StatusPersonne::PROSPECT->name);
    }

    /**
     * Obtenir les clients
     *
     * @param Builder<Personne> $query
     * @return Builder<Personne>
     */
    public function scopeIsClient(Builder $query): Builder
    {
        return $query->currentStatus(StatusPersonne::CLIENT->name);
    }

    // relations

    /**
     * Obtenir le type de personne
     *
     * @return BelongsTo<TypePersonne, Personne>
     */
    public function type(): BelongsTo
    {
        return $this->belongsTo(TypePersonne::class, 'type_personne_id');
    }
}
