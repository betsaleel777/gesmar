<?php

namespace App\Models\Exploitation;

use App\Enums\StatusPersonne;
use App\Models\Scopes\OwnSiteScope;
use App\Models\Scopes\RecentScope;
use App\Traits\HasContrats;
use App\Traits\HasOwnerScope;
use App\Traits\HasResponsible;
use App\Traits\HasSites;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\MorphOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use OwenIt\Auditing\Contracts\Auditable;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Spatie\MediaLibrary\MediaCollections\Models\Media;
use Spatie\ModelStatus\HasStatuses;

/**
 * @mixin IdeHelperPersonne
 */
class Personne extends Model implements HasMedia, Auditable
{
    use HasFactory, SoftDeletes, HasStatuses, HasOwnerScope, HasResponsible, HasSites, InteractsWithMedia, HasContrats;
    use \OwenIt\Auditing\Auditable;

    protected $fillable = [
        'nom', 'code', 'prenom', 'adresse', 'ville', 'contact', 'email', 'type_personne_id', 'site_id',
        'numero_compte', 'banque', 'lieu_naissance', 'profession', 'naissance', 'nationalite', 'nom_complet_conjoint',
        'naissance_conjoint', 'profession_conjoint', 'date_mariage', 'lieu_mariage', 'regime', 'nom_complet_mere',
        'nom_complet_pere', 'situation_matrimoniale',
    ];
    protected $auditExclude = ['code'];
    protected $appends = ['status'];

    // rules
    public const SIMPLE_RULES = [
        'nom' => 'required|max:60',
        'prenom' => 'required|max:255',
        'adresse' => 'required|max:255',
        'contact' => 'required|max:20',
        'email' => 'nullable|email',
        'ville' => 'required|max:80',
        'site_id' => 'required',
    ];

    public const RULES = [
        'nom' => 'required|max:60',
        'prenom' => 'required|max:255',
        'adresse' => 'required|max:255',
        'contact' => 'required|max:20',
        'email' => 'nullable|email',
        'ville' => 'required|max:80',
        'site_id' => 'required',
        'photo_identite' => 'required|image',
        'photocopie_carte' => 'required|image',
    ];

    public const EDIT_RULES = [
        'nom' => 'required|max:60',
        'prenom' => 'required|max:255',
        'adresse' => 'required|max:255',
        'contact' => 'required|max:20',
        'email' => 'nullable|email',
        'ville' => 'required|max:80',
        'site_id' => 'required',
    ];

    public const PATCH_EDIT_RULES = [
        'image_identite' => 'required|image',
        'image_carte' => 'required|image',
    ];

    private const COUPLES_RULES = [
        'situation_matrimoniale' => 'required',
        'nom_complet_conjoint' => 'required',
        'naissance_conjoint' => 'required',
        'profession_conjoint' => 'required',
    ];

    private const MARIED_RULES = [
        'date_mariage' => 'required',
        'lieu_mariage' => 'required',
        'regime' => 'required',
    ];

    private const OTHERS_RULLES = [
        'lieu_naissance' => 'required',
        'profession' => 'required',
        'naissance' => 'required',
        'nationalite' => 'required',
        'nom_complet_pere' => 'required',
        'nom_complet_mere' => 'required',
        'situation_matrimoniale' => 'required',
    ];

    private const COUPLES_ATTRIBUTES = [
        'nom_complet_conjoint', 'naissance_conjoint', 'profession_conjoint',
        'nom_complet_mere', 'nom_complet_pere'
    ];

    private const MARIED_ATTRIBUTES = ['date_mariage', 'lieu_mariage', 'regime'];

    private const OTHERS_ATTRIBUTES = ['situation_matrimoniale', 'lieu_naissance', 'profession', 'naissance', 'nationalite'];

    public static function editRules(int $id, string $situation)
    {
        $emailRule = ['email' => 'nullable|unique:personnes,email,' . $id];
        return match ($situation) {
            config('constants.SITUATION_MARIAGE') => array_merge($emailRule, self::EDIT_RULES, self::OTHERS_RULLES, self::COUPLES_RULES, self::MARIED_RULES),
            config('constants.SITUATION_CONCUBINAGE') => array_merge($emailRule, self::EDIT_RULES, self::OTHERS_RULLES, self::COUPLES_RULES),
            default => array_merge($emailRule, self::EDIT_RULES, self::OTHERS_RULLES)
        };
    }

    protected static function booted(): void
    {
        static::addGlobalScope(new RecentScope);
        static::addGlobalScope(new OwnSiteScope);
    }

    public function registerMediaCollections(): void
    {
        $this->addMediaCollection(config('constants.COLLECTION_MEDIA_IDENTITE'))->singleFile();
        $this->addMediaCollection(config('constants.COLLECTION_MEDIA_PHOTOCOPIE'))->singleFile();
    }

    public function getComplet(): bool | null
    {
        $condition = true;
        if (!empty($this->attributes['situation_matrimoniale'])) {
            $conditionnables = match ($this->attributes['situation_matrimoniale']) {
                config('constants.SITUATION_MARIAGE') => array_merge(self::OTHERS_ATTRIBUTES, self::COUPLES_ATTRIBUTES, self::MARIED_ATTRIBUTES),
                config('constants.SITUATION_CONCUBINAGE') => array_merge(self::OTHERS_ATTRIBUTES, self::COUPLES_ATTRIBUTES),
                default => self::OTHERS_ATTRIBUTES
            };
            foreach ($this->attributes as $property => $value) {
                if (in_array($property, $conditionnables) and empty($value)) {
                    $condition = false;
                    break;
                }
            }
            return $condition;
        } else {
            return null;
        }
    }

    public function getAlias(): string | null
    {
        if (!empty($this->attributes['nom']) and !empty($this->attributes['prenom']) and !empty($this->attributes['code'])) {
            return $this->attributes['nom'] . ' ' . $this->attributes['prenom'] . ' (' . str($this->attributes['code'])->upper() . ')';
        } else {
            return null;
        }
    }

    public function getFullname(): string | null
    {
        if (isset($this->attributes['nom']) and isset($this->attributes['prenom'])) {
            return $this->attributes['nom'] . ' ' . $this->attributes['prenom'];
        } else {
            return null;
        }
    }

    public function codeGenerate(): void
    {
        $rang = $this->whereYear('created_at', Carbon::now()->format('Y'))->withTrashed()->count() + 1;
        $this->attributes['code'] = str((string) $rang)->padLeft(3, '0') . Carbon::now()->format('y');
    }

    public function prospect(): void
    {
        $this->setStatus(StatusPersonne::PROSPECT->name);
    }

    public function client(): void
    {
        $this->setStatus(StatusPersonne::CLIENT->name);
    }

    public function checkClient(): bool
    {
        if (!empty($this->status)) {
            return $this->status === StatusPersonne::CLIENT->name;
        } else {
            abort(500, "la propriété de status client n'existe pas sur le model");
        }
    }

    public function checkProspect(): bool
    {
        if (!empty($this->status)) {
            return $this->status === StatusPersonne::PROSPECT->name;
        } else {
            abort(500, "la propriété de status prospect n'existe pas sur le model");
        }
    }

    //scopes

    /**
     * Obtenir les prospects
     */
    public function scopeIsProspect(Builder $query): Builder
    {
        return $query->currentStatus(StatusPersonne::PROSPECT->name);
    }

    /**
     * Obtenir les clients
     */
    public function scopeIsClient(Builder $query): Builder
    {
        return $query->currentStatus(StatusPersonne::CLIENT->name);
    }

    public function scopeFilterBetweenStatusDate(Builder $query, ?array $dates): Builder
    {
        [$start, $end] = $dates;
        return $query->when($dates, fn (Builder $query): Builder => $query->whereHas('statuses', fn (Builder $query): Builder => $query->whereBetween('created_at', [$start, $end])));
    }

    // relations
    /**
     * Obtenir le type de personne
     */
    public function type(): BelongsTo
    {
        return $this->belongsTo(TypePersonne::class, 'type_personne_id');
    }

    public function identite(): MorphOne
    {
        return $this->morphOne(Media::class, 'model')->where('collection_name', '=', config('constants.COLLECTION_MEDIA_IDENTITE'));
    }

    public function photocopie(): MorphOne
    {
        return $this->morphOne(Media::class, 'model')->where('collection_name', '=', config('constants.COLLECTION_MEDIA_PHOTOCOPIE'));
    }
}
