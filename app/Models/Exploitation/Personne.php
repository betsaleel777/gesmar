<?php

namespace App\Models\Exploitation;

use App\Enums\StatusPersonne;
use App\Models\Scopes\RecentScope;
use App\Traits\HasContrats;
use App\Traits\HasSites;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\MorphOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use OwenIt\Auditing\Contracts\Auditable;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Spatie\ModelStatus\HasStatuses;
use Spatie\MediaLibrary\MediaCollections\Models\Media;

/**
 * @mixin IdeHelperPersonne
 */
class Personne extends Model implements HasMedia, Auditable
{
    use HasFactory, SoftDeletes, HasStatuses, HasSites, InteractsWithMedia, HasContrats;
    use \OwenIt\Auditing\Auditable;

    protected $fillable = [
        'nom', 'code', 'prenom', 'adresse', 'ville', 'contact', 'email', 'type_personne_id', 'site_id',
        'numero_compte', 'banque', 'lieu_naissance', 'profession', 'naissance', 'nationalite', 'nom_complet_conjoint',
        'naissance_conjoint', 'profession_conjoint', 'date_mariage', 'lieu_mariage', 'regime', 'nom_complet_mere',
        'nom_complet_pere', 'situation_matrimoniale'
    ];
    protected $auditExclude = ['code'];
    /**
     *
     * @var array<int, string>
     */
    protected $appends = ['alias', 'complet', 'status'];

    // rules
    public const SIMPLE_RULES = [
        'nom' => 'required|max:60',
        'prenom' => 'required|max:255',
        'adresse' => 'required|max:255',
        'contact' => 'required|max:20',
        'email' => 'nullable|email',
        'ville' => 'required|max:80',
        'site_id' => 'required',
    ];

    public const RULES = [
        'nom' => 'required|max:60',
        'prenom' => 'required|max:255',
        'adresse' => 'required|max:255',
        'contact' => 'required|max:20',
        'email' => 'nullable|email',
        'ville' => 'required|max:80',
        'site_id' => 'required',
        'photo_identite' => 'required|image',
        'photocopie_carte' => 'required|image',
    ];

    public const EDIT_RULES = [
        'nom' => 'required|max:60',
        'prenom' => 'required|max:255',
        'adresse' => 'required|max:255',
        'contact' => 'required|max:20',
        'email' => 'nullable|email',
        'ville' => 'required|max:80',
        'site_id' => 'required',
    ];

    public const PATCH_EDIT_RULES = [
        'image_identite' => 'required|image',
        'image_carte' => 'required|image',
    ];

    private const COUPLES_RULES = [
        'situation_matrimoniale' => 'required',
        'nom_complet_conjoint' => 'required',
        'naissance_conjoint' => 'required',
        'profession_conjoint' => 'required',
    ];

    private const MARIED_RULES = [
        'date_mariage' => 'required',
        'lieu_mariage' => 'required',
        'regime' => 'required',
    ];

    private const OTHERS_RULLES = [
        'lieu_naissance' => 'required',
        'profession' => 'required',
        'naissance' => 'required',
        'nationalite' => 'required',
        'nom_complet_pere' => 'required',
        'nom_complet_mere' => 'required',
        'situation_matrimoniale' => 'required'
    ];

    // categories d'attribut
    private const COUPLES_ATTRIBUTES = ['nom_complet_conjoint', 'naissance_conjoint', 'profession_conjoint', 'nom_complet_mere', 'nom_complet_pere'];

    private const MARIED_ATTRIBUTES = ['date_mariage', 'lieu_mariage', 'regime'];

    private const OTHERS_ATTRIBUTES = ['situation_matrimoniale', 'lieu_naissance', 'profession', 'naissance', 'nationalite'];


    public static function editRules(int $id, string $situation)
    {
        $emailRule = ['email' => 'nullable|unique:personnes,email,' . $id];
        return match ($situation) {
            SITUATION_MARIAGE => array_merge($emailRule, self::EDIT_RULES, self::OTHERS_RULLES, self::COUPLES_RULES, self::MARIED_RULES),
            SITUATION_CONCUBINAGE => array_merge($emailRule, self::EDIT_RULES, self::OTHERS_RULLES, self::COUPLES_RULES),
            default => array_merge($emailRule, self::EDIT_RULES, self::OTHERS_RULLES)
        };
    }


    protected static function booted(): void
    {
        static::addGlobalScope(new RecentScope);
    }

    /**
     * savoir si le dossier de la personne est complet ou incomplet
     *
     * @return Attribute<string, never>
     */
    protected function complet(): Attribute
    {
        $condition = true;
        $conditionnables = match ($this->attributes['situation_matrimoniale']) {
            SITUATION_MARIAGE => array_merge(self::OTHERS_ATTRIBUTES, self::COUPLES_ATTRIBUTES, self::MARIED_ATTRIBUTES),
            SITUATION_CONCUBINAGE => array_merge(self::OTHERS_ATTRIBUTES, self::COUPLES_ATTRIBUTES),
            default => self::OTHERS_ATTRIBUTES
        };
        foreach ($this->attributes as $property => $value) {
            if (in_array($property, $conditionnables) and empty($value)) {
                $condition = false;
                break;
            }
        }
        return Attribute::make(get: fn () => $condition);
    }

    public function registerMediaCollections(): void
    {
        $this->addMediaCollection(COLLECTION_MEDIA_IDENTITE)->singleFile();
        $this->addMediaCollection(COLLECTION_MEDIA_PHOTOCOPIE)->singleFile();
    }

    /**
     *
     * @return Attribute<string, never>
     */
    protected function alias(): Attribute
    {
        return Attribute::make(
            get: fn () => $this->attributes['nom'] . ' ' . $this->attributes['prenom'] . ' (' . str($this->attributes['code'])->upper() . ')',
        );
    }
    /**
     *
     * @return Attribute<string, never>
     */
    protected function nomComplet(): Attribute
    {
        return Attribute::make(
            get: fn () => str($this->attributes['nom'] . ' ' . $this->attributes['prenom'])->lower()->toString(),
        );
    }

    public function codeGenerate(): void
    {
        $rang = $this->count() + 1;
        $this->attributes['code'] = PERSONNE_CODE_PREFIXE . str_pad((string) $rang, 7, '0', STR_PAD_LEFT);
    }

    public function prospect(): void
    {
        $this->setStatus(StatusPersonne::PROSPECT->name);
    }

    public function client(): void
    {
        $this->setStatus(StatusPersonne::CLIENT->name);
    }

    public function checkClient(): bool
    {
        if (!empty($this->status)) {
            return $this->status === StatusPersonne::CLIENT->name;
        } else {
            abort(500, "la propriété de status client n'existe pas sur le model");
        }
    }

    public function checkProspect(): bool
    {
        if (!empty($this->status)) {
            return $this->status === StatusPersonne::PROSPECT->name;
        } else {
            abort(500, "la propriété de status prospect n'existe pas sur le model");
        }
    }

    //scopes

    /**
     * Obtenir les prospects
     *
     * @param Builder<Personne> $query
     * @return Builder<Personne>
     */
    public function scopeIsProspect(Builder $query): Builder
    {
        return $query->currentStatus(StatusPersonne::PROSPECT->name);
    }

    /**
     * Obtenir les clients
     *
     * @param Builder<Personne> $query
     * @return Builder<Personne>
     */
    public function scopeIsClient(Builder $query): Builder
    {
        return $query->currentStatus(StatusPersonne::CLIENT->name);
    }

    /**
     * Obtenir les personnes crée par l'utilisateur courant
     *
     */
    public function scopeOwner(Builder $query, int $id): Builder
    {
        return $query->whereHas('audits', fn ($query) => $query->where('user_id', $id));
    }


    // relations
    /**
     * Obtenir le type de personne
     *
     * @return BelongsTo<TypePersonne, Personne>
     */
    public function type(): BelongsTo
    {
        return $this->belongsTo(TypePersonne::class, 'type_personne_id');
    }

    public function identite(): MorphOne
    {
        return $this->morphOne(Media::class, 'model')->where('collection_name', '=', COLLECTION_MEDIA_IDENTITE);
    }

    public function photocopie(): MorphOne
    {
        return $this->morphOne(Media::class, 'model')->where('collection_name', '=', COLLECTION_MEDIA_PHOTOCOPIE);
    }
}
