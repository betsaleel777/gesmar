<?php

namespace App\Models\Exploitation;

use App\Models\Architecture\Emplacement;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class ContratEmplacement extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = ['code', 'personne_id', 'site_id', 'usage', 'debut', 'emplacement_id',
        'date_solde', 'date_acompte', 'date_proforma', 'attachment',
    ];
    protected $appends = ['status'];
    protected $dates = ['created_at'];

    const RULES = [
        'code' => 'required|unique:contrats_emplacements,code',
        'personne_id' => 'required',
        'site_id' => 'required',
        'debut' => 'required',
        'emplacement_id' => 'required|numeric',
    ];

    const PROFORMA = 'proforma';
    const SOLDE = 'soldé';
    const ACOMPTE = 'acompté';

    public static function edit_rules($id)
    {
        return [
            'code' => 'required|unique:contrat_emplacements,code,' . $id,
            'personne_id' => 'required',
            'site_id' => 'required',
            'debut' => 'required',
            'emplacement_id' => 'required|numeric',
        ];
    }

    public function getStatusAttribute()
    {
        if (!empty($this->atrributes['date_solde'])) {
            return self::SOLDE;
        } else if (!empty($this->atrributes['date_accompte'])) {
            return self::ACOMPTE;
        } else {
            return self::PROFORMA;
        }
    }

    public function proforma()
    {
        $this->attributes['date_proforma'] = Carbon::now();
    }

    public function acompte()
    {
        $this->attributes['date_acompte'] = Carbon::now();
    }

    public function solde()
    {
        $this->attributes['date_solde'] = Carbon::now();
    }

    public function proformasScope($query)
    {
        return $query->whereNotNull('date_proforma');
    }

    public function OnlyProformasScope($query)
    {
        return $query->whereNotNull('date_proforma')->whereNull('date_acompte')->whereNull('date_solde');
    }

    public function acomptesScope($query)
    {
        return $query->whereNotNull('date_acompte');
    }

    public function OnlyAcomptesScope($query)
    {
        return $query->whereNotNull('date_acompte')->whereNull('date_solde');
    }

    public function soldesScope($query)
    {
        return $query->whereNotNull('date_solde');
    }

    // relations

    public function site()
    {
        return $this->belongsTo(Site::class);
    }

    public function personne()
    {
        return $this->belongsTo(Personne::class);
    }

    public function emplacement()
    {
        return $this->belongsTo(Emplacement::class);
    }
}
