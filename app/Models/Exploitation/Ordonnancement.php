<?php

namespace App\Models\Exploitation;

use App\Enums\StatusOrdonnancement;
use App\Models\Architecture\Emplacement;
use App\Models\Finance\Facture;
use App\Models\Exploitation\Contrat;
use App\Models\Scopes\RecentScope;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Spatie\ModelStatus\HasStatuses;
use Staudenmeir\EloquentHasManyDeep\HasOneDeep;

/**
 * @mixin IdeHelperOrdonnancement
 */
class Ordonnancement extends Model
{
    use HasStatuses;
    use \Staudenmeir\EloquentHasManyDeep\HasRelationships;

    protected $fillable = ['total', 'code'];
    protected $dates = ['created_at'];
    /**
     * Undocumented variable
     *
     * @var array<int, string>
     */
    protected $appends = ['status'];

    protected static function booted(): void
    {
        static::addGlobalScope(new RecentScope);
    }

    public function codeGenerate(): void
    {
        $rang = $this->count() + 1;
        $this->attributes['code'] = ORDONNANCEMENT_CODE_PREFIXE . str_pad((string) $rang, 7, '0', STR_PAD_LEFT);
    }

    public function paid(): bool
    {
        return $this->status === StatusOrdonnancement::PAID->value;
    }

    public function payer(): void
    {
        $this->setStatus(StatusOrdonnancement::PAID->value);
    }

    public function impayer(): void
    {
        $this->setStatus(StatusOrdonnancement::UNPAID->value);
    }

    /**
     * les ordonnancements payés à la caisse
     *
     * @param Builder<Ordonnancement> $query
     * @return Builder<Ordonnancement>
     */
    public function scopePaid(Builder $query): Builder
    {
        return $query->currentStatus(StatusOrdonnancement::PAID->value);
    }

    /**
     * les ordonnancement impayés à la caisse
     *
     * @param Builder<Ordonnancement> $query
     * @return Builder<Ordonnancement>
     */
    public function scopeUnpaid(Builder $query): Builder
    {
        return $query->currentStatus(StatusOrdonnancement::UNPAID->value);
    }

    /**
     * Paiements liés à un ordonnacement
     *
     * @return HasMany<Paiement>
     */
    public function paiements(): HasMany
    {
        return $this->hasMany(Paiement::class);
    }

    /**
     * Obtenir le contrat de l'ordonnancement
     *
     * @return HasOneDeep<Contrat>
     */
    public function contrat(): HasOneDeep
    {
        return $this->hasOneDeep(
            Contrat::class,
            [Paiement::class, Facture::class],
            [null, 'id', 'id'],
            [null, 'facture_id', 'contrat_id'],
        );
    }

    public function emplacement(): HasOneDeep
    {
        return $this->hasOneDeep(
            Emplacement::class,
            [Paiement::class, Facture::class, Contrat::class],
            [null, 'id', 'id', 'id'],
            [null, 'facture_id', 'contrat_id', 'emplacement_id'],
        );
    }

    public function personne(): HasOneDeep
    {
        return $this->hasOneDeep(
            Personne::class,
            [Paiement::class, Facture::class, Contrat::class],
            [null, 'id', 'id', 'id'],
            [null, 'facture_id', 'contrat_id', 'personne_id'],
        );
    }
}
