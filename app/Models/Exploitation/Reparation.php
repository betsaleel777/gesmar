<?php

namespace App\Models\Exploitation;

use App\Enums\StatusReparation;
use App\Models\Architecture\Emplacement;
use App\Models\Architecture\Site;
use App\Models\Scopes\OwnSiteScope;
use App\Models\Scopes\RecentScope;
use App\StateMachines\ReparationStateMachine;
use App\Traits\HasSites;
use Asantibanez\LaravelEloquentStateMachines\Traits\HasStateMachines;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\MorphOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use OwenIt\Auditing\Auditable as AuditingAuditable;
use OwenIt\Auditing\Contracts\Auditable;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Spatie\MediaLibrary\MediaCollections\Models\Media;

/**
 * @mixin IdeHelperReparation
 */
class Reparation extends Model implements Auditable, HasMedia
{
    use AuditingAuditable, HasSites, HasStateMachines, SoftDeletes, InteractsWithMedia;
    protected $fillable = ['code', 'titre', 'emplacement_id', 'description', 'site_id'];
    protected $dates = ['created_at'];
    public $stateMachines = ['status' => ReparationStateMachine::class];

    protected static function booted(): void
    {
        static::addGlobalScope(new RecentScope);
        static::addGlobalScope(new OwnSiteScope);
    }

    public function codeGenerate(): void
    {
        $rang = empty($this->orderBy('id', 'desc')->first()) ? 1 : $this->orderBy('id', 'desc')->first()->id + 1;
        $this->attributes['code'] = REPARATION_CODE_PREFIXE . str_pad((string) $rang, 5, '0', STR_PAD_LEFT) . Carbon::now()->format('y');
    }

    public function setProgressing(): void
    {
        $this->status()->transitionTo(StatusReparation::PROGRESSING->value);
    }

    public function setFinished(): void
    {
        $this->status()->transitionTo(StatusReparation::FINISHED->value);
    }

    public function registerMediaCollections(): void
    {
        $this->addMediaCollection('first')->singleFile();
        $this->addMediaCollection('second')->singleFile();
    }

    public function first(): MorphOne
    {
        return $this->morphOne(Media::class, 'model')->where('collection_name', '=', 'first');
    }

    public function second(): MorphOne
    {
        return $this->morphOne(Media::class, 'model')->where('collection_name', '=', 'second');
    }

    public function emplacement(): BelongsTo
    {
        return $this->belongsTo(Emplacement::class);
    }

    public function site(): BelongsTo
    {
        return $this->belongsTo(Site::class);
    }
}
