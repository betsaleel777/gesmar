<?php

namespace App\Models\Exploitation;

use App\Models\Architecture\Emplacement;
use App\Models\Architecture\ServiceAnnexe;
use App\Models\Architecture\Site;
use App\Models\Finance\Facture;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Contrat extends Model
{
    use SoftDeletes;

    protected $fillable = [
        'code', 'personne_id', 'site_id', 'usage', 'debut', 'fin', 'annexe_id', 'emplacement_id',
        'date_encours', 'date_proforma', 'date_attente', 'attachment',
    ];
    protected $appends = ['status', 'type'];
    const RULES = [
        'site_id' => 'required',
        'personne_id' => 'required',
        'debut' => 'required',
        'fin' => 'required',
    ];
    const PROFORMA = 'proforma';
    const EN_COURS = 'en cours';
    const ATTENTE = 'en attente';
    const CONTRAT_ANNEXE = 'annexe';
    const CONTRAT_BAIL = 'bail';

    public static function annexeRules(): array
    {
        return array_merge(self::RULES, ['annexe_id' => 'required']);
    }

    public static function bailRules(): array
    {
        return array_merge(self::RULES, ['emplacement_id' => 'required', 'avance' => 'required']);
    }

    public function getStatusAttribute(): string
    {
        if (!empty($this->atrributes['date_encours'])) {
            return self::EN_COURS;
        } else if (!empty($this->attributes['date_attente'])) {
            return self::ATTENTE;
        } else {
            return self::PROFORMA;
        }
    }

    public function getTypeAttribute(): string
    {
        return $this->attributes['annexe_id'] ? self::CONTRAT_ANNEXE : self::CONTRAT_BAIL;
    }

    public function isAnnexe()
    {
        return !empty($this->attributes['annexe_id']);
    }

    public function isBail()
    {
        return !empty($this->attributes['emplacement_id']);
    }

    public function codeGenerate(): void
    {
        $rang = $this->get()->count() + 1;
        $this->attributes['code'] = 'CON' . str_pad($rang, 7, '0', STR_PAD_LEFT);
    }

    public function proforma(): void
    {
        $this->attributes['date_proforma'] = Carbon::now();
    }

    public function isProforma(): bool
    {
        return !empty($this->attributes['date_proforma']);
    }

    public function progressing(): void
    {
        $this->attributes['date_encours'] = Carbon::now();
    }

    public function isProgressing(): bool
    {
        return !empty($this->attributes['date_encours']);
    }

    public function valider(): void
    {
        $this->attributes['date_attente'] = Carbon::now();
    }

    public function isValide(): bool
    {
        return !empty($this->attributes['date_attente']);
    }

    // scope

    public function scopeIsAnnexe($query)
    {
        return $query->whereNotNull('annexe_id');
    }

    public function scopeIsBail($query)
    {
        return $query->whereNotNull('emplacement_id');
    }

    public function scopeProformas($query)
    {
        return $query->whereNotNull('date_proforma');
    }

    public function scopeOnlyProformas($query)
    {
        return $query->whereNotNull('date_proforma')->whereNull('date_attente')->whereNull('date_encours');
    }

    public function scopeAttentes($query)
    {
        return $query->whereNotNull('date_attente');
    }

    public function scopeOnlyAttentes($query)
    {
        return $query->whereNotNull('date_attente')->whereNull('date_acompte')->whereNull('date_encours');
    }

    public function scopeProgressing($query)
    {
        return $query->whereNotNull('date_encours');
    }

    // relations

    public function site()
    {
        return $this->belongsTo(Site::class);
    }

    public function personne()
    {
        return $this->belongsTo(Personne::class);
    }

    public function annexe()
    {
        return $this->belongsTo(ServiceAnnexe::class);
    }

    public function emplacement()
    {
        return $this->belongsTo(Emplacement::class);
    }

    public function factures()
    {
        return $this->hasMany(Facture::class);
    }
}
