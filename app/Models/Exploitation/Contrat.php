<?php

namespace App\Models\Exploitation;

use App\Enums\StatusContrat;
use App\Enums\TypeContrat;
use App\Models\Architecture\Emplacement;
use App\Models\Architecture\ServiceAnnexe;
use App\Models\Architecture\Site;
use App\Models\Architecture\TypeEquipement;
use App\Models\Finance\Facture;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Spatie\ModelStatus\HasStatuses;

/**
 * @mixin IdeHelperContrat
 */
class Contrat extends Model
{
    use SoftDeletes;
    use HasStatuses;

    protected $fillable = [
        'code', 'personne_id', 'site_id', 'debut', 'fin', 'annexe_id', 'emplacement_id','attachment', 'avance', 'equipable',
    ];
    /**
    * The attributes that should be cast.
    *
    * @var array
    */
    protected $casts = ['equipable' => 'boolean'];
    /**
     * Undocumented variable
     *
     * @var array<int, string>
     */
    protected $appends = ['type'];

    public const RULES = [
        'site_id' => 'required',
        'personne_id' => 'required',
        'debut' => 'required',
        'fin' => 'required',
    ];

    public const EDIT_RULES = [
        'avance' => 'required|numeric',
        'debut' => 'required',
        'fin' => 'required',
    ];

    protected function type(): Attribute
    {
        return Attribute::make(
            get:fn () => $this->attributes['annexe_id'] ? TypeContrat::ANNEXE : TypeContrat::BAIL
        );
    }

    /**
     * Undocumented function
     *
     * @return array<string, string>
     */
    public static function annexeRules(): array
    {
        return array_merge(self::RULES, ['annexe_id' => 'required']);
    }

    /**
     * Undocumented function
     *
     * @return array<string, string>
     */
    public static function bailRules(): array
    {
        return array_merge(self::RULES, ['emplacement_id' => 'required', 'avance' => 'required']);
    }

    public function isEquipable(): bool
    {
        return $this->attributes['equipable'];
    }

    public function isAnnexe(): bool
    {
        return !empty($this->attributes['annexe_id']);
    }

    public function isBail(): bool
    {
        return !empty($this->attributes['emplacement_id']);
    }

    public function codeGenerate(): void
    {
        $rang = $this->get()->count() + 1;
        $this->attributes['code'] = CONTRAT_CODE_PREFIXE . str_pad((string) $rang, 7, '0', STR_PAD_LEFT);
    }

    public function validated(): void
    {
        $this->setStatus(StatusContrat::VALIDATED->value);
    }

    public function onValidated(): void
    {
        $this->setStatus(StatusContrat::ONVALIDATED->value);
    }

    public function attente(): void
    {
        $this->setStatus(StatusContrat::ATTENTE->value);
    }

    public function endorsed(): void
    {
        $this->setStatus(StatusContrat::ONENDORSED->value);
    }

    // scopes

    /**
     * Undocumented function
     *
     * @param  Builder<Contrat>  $query
     * @return Builder<Contrat>
     */
    public function scopeIsAnnexe(Builder $query): Builder
    {
        return $query->whereNotNull('annexe_id');
    }
    /**
     * Undocumented function
     *
     * @param  Builder<Contrat>  $query
     * @return Builder<Contrat>
     */
    public function scopeIsBail(Builder $query): Builder
    {
        return $query->whereNotNull('emplacement_id');
    }

    /**
     * obtenir les contrats validés
     *
     * @param Builder<Contrat> $query
     * @return Builder<Contrat>
     */
    public function scopeIsValidated(Builder $query): Builder
    {
        return $query->whereHas('statuses', function ($query) {
            return $query->where('name', StatusContrat::VALIDATED->value) ;
        });
    }
    /**
     * obtenir les contrats à valider
     *
     * @param Builder<Contrat> $query
     * @return Builder<Contrat>
     */
    public function scopeOnValidated(Builder $query): Builder
    {
        return $query->whereHas('statuses', function ($query) {
            return $query->where('name', StatusContrat::ONVALIDATED->value) ;
        });
    }

    /**
     * obtenir les contrats à signer
     *
     * @param Builder<Contrat> $query
     * @return Builder<Contrat>
     */
    public function scopeOnEndorsed(Builder $query): Builder
    {
        return $query->whereHas('statuses', function ($query) {
            return $query->where('name', StatusContrat::ONENDORSED->value) ;
        });
    }

    /**
     * obtenir les contrats en attente
     *
     * @param Builder<Contrat> $query
     * @return Builder<Contrat>
     */
    public function scopeEnAttente(Builder $query): Builder
    {
        return $query->whereHas('statuses', function ($query) {
            return $query->where('name', StatusContrat::ATTENTE->value) ;
        });
    }

    // relations
    /**
     * Undocumented function
     *
     * @return BelongsTo<Site, Contrat>
     */
    public function site(): BelongsTo
    {
        return $this->belongsTo(Site::class);
    }

    /**
     * Undocumented function
     *
     * @return BelongsTo<Personne, Contrat>
     */
    public function personne(): BelongsTo
    {
        return $this->belongsTo(Personne::class);
    }

    /**
     * Undocumented function
     *
     * @return BelongsTo<ServiceAnnexe, Contrat>
     */
    public function annexe(): BelongsTo
    {
        return $this->belongsTo(ServiceAnnexe::class);
    }

    /**
     * Undocumented function
     *
     * @return BelongsTo<Emplacement, Contrat>
     */
    public function emplacement(): BelongsTo
    {
        return $this->belongsTo(Emplacement::class);
    }

    /**
     * Undocumented function
     *
     * @return HasMany<Facture>
     */
    public function factures(): HasMany
    {
        return $this->hasMany(Facture::class);
    }

    /**
     * Undocumented function
     *
     * @return BelongsToMany<TypeEquipement>
     */
    public function equipements(): BelongsToMany
    {
        return $this->belongsToMany(TypeEquipement::class, 'contrats_type_equipements', 'contrat_id', 'type_equipement_id');
    }
}
