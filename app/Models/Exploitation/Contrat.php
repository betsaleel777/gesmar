<?php

namespace App\Models\Exploitation;

use App\Models\Architecture\Emplacement;
use App\Models\Architecture\ServiceAnnexe;
use App\Models\Architecture\Site;
use App\Models\Architecture\TypeEquipement;
use App\Models\Finance\Facture;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * @mixin IdeHelperContrat
 */
class Contrat extends Model
{
    use SoftDeletes;

    protected $fillable = [
        'code', 'personne_id', 'site_id', 'debut', 'fin', 'annexe_id', 'emplacement_id',
        'date_encours', 'date_proforma', 'date_attente', 'attachment', 'avance', 'equipable',
    ];

    protected $appends = ['status', 'type'];

    const RULES = [
        'site_id' => 'required',
        'personne_id' => 'required',
        'debut' => 'required',
        'fin' => 'required',
    ];

    const EDIT_RULES = [
        'avance' => 'required|numeric',
        'debut' => 'required',
        'fin' => 'required',
    ];

    const PROFORMA = 'proforma';

    const EN_COURS = 'en cours';

    const ATTENTE = 'en attente';

    const CONTRAT_ANNEXE = 'annexe';

    const CONTRAT_BAIL = 'bail';

    /**
     * Undocumented function
     *
     * @return Attribute{get: (callable(): string)}
     */
    protected function status(): Attribute
    {
        return new Attribute(
            get:function () {
                if (!empty($this->atrributes['date_encours'])) {
                    return self::EN_COURS;
                } elseif (!empty($this->attributes['date_attente'])) {
                    return self::ATTENTE;
                } else {
                    return self::PROFORMA;
                }
            }
        );
    }

    /**
     * Undocumented function
     *
     * @return Attribute{get:(callable(): string)}
     */
    protected function type(): Attribute
    {
        return new Attribute(
            get:fn() => $this->attributes['annexe_id'] ? self::CONTRAT_ANNEXE : self::CONTRAT_BAIL
        );
    }

    /**
     * Undocumented function
     *
     * @return array<string, string>
     */
    public static function annexeRules(): array
    {
        return array_merge(self::RULES, ['annexe_id' => 'required']);
    }

    /**
     * Undocumented function
     *
     * @return array<string, string>
     */
    public static function bailRules(): array
    {
        return array_merge(self::RULES, ['emplacement_id' => 'required', 'avance' => 'required']);
    }

    public function isEquipable(): bool
    {
        return $this->attributes['equipable'];
    }

    public function isAnnexe(): bool
    {
        return !empty($this->attributes['annexe_id']);
    }

    public function isBail(): bool
    {
        return !empty($this->attributes['emplacement_id']);
    }

    public function codeGenerate(): void
    {
        $rang = $this->get()->count() + 1;
        $this->attributes['code'] = 'CON' . str_pad((string) $rang, 7, '0', STR_PAD_LEFT);
    }

    public function proforma(): void
    {
        $this->attributes['date_proforma'] = Carbon::now();
    }

    public function isProforma(): bool
    {
        return !empty($this->attributes['date_proforma']);
    }

    public function progressing(): void
    {
        $this->attributes['date_encours'] = Carbon::now();
    }

    public function isProgressing(): bool
    {
        return !empty($this->attributes['date_encours']);
    }

    public function valider(): void
    {
        $this->attributes['date_attente'] = Carbon::now();
    }

    public function isValide(): bool
    {
        return !empty($this->attributes['date_attente']);
    }

    // scopes

    /**
     * Undocumented function
     *
     * @param  Builder<Contrat>  $query
     * @return Builder<Contrat>
     */
    public function scopeIsAnnexe(Builder $query): Builder
    {
        return $query->whereNotNull('annexe_id');
    }

    /**
     * Undocumented function
     *
     * @param  Builder<Contrat>  $query
     * @return Builder<Contrat>
     */
    public function scopeIsBail(Builder $query): Builder
    {
        return $query->whereNotNull('emplacement_id');
    }

    /**
     * Undocumented function
     *
     * @param  Builder<Contrat>  $query
     * @return Builder<Contrat>
     */
    public function scopeProformas(Builder $query): Builder
    {
        return $query->whereNotNull('date_proforma');
    }

    /**
     * Undocumented function
     *
     * @param  Builder<Contrat>  $query
     * @return Builder<Contrat>
     */
    public function scopeOnlyProformas(Builder $query): Builder
    {
        return $query->whereNotNull('date_proforma')->whereNull('date_attente')->whereNull('date_encours');
    }

    /**
     * Undocumented function
     *
     * @param  Builder<Contrat>  $query
     * @return Builder<Contrat>
     */
    public function scopeAttentes(Builder $query): Builder
    {
        return $query->whereNotNull('date_attente');
    }

    /**
     * Undocumented function
     *
     * @param  Builder<Contrat>  $query
     * @return Builder<Contrat>
     */
    public function scopeOnlyAttentes(Builder $query): Builder
    {
        return $query->whereNotNull('date_attente')->whereNull('date_acompte')->whereNull('date_encours');
    }

    /**
     * Undocumented function
     *
     * @param  Builder<Contrat>  $query
     * @return Builder<Contrat>
     */
    public function scopeProgressing(Builder $query): Builder
    {
        return $query->whereNotNull('date_encours');
    }

    // relations
    /**
     * Undocumented function
     *
     * @return BelongsTo<Site>
     */
    public function site(): BelongsTo
    {
        return $this->belongsTo(Site::class);
    }

    /**
     * Undocumented function
     *
     * @return BelongsTo<Personne>
     */
    public function personne(): BelongsTo
    {
        return $this->belongsTo(Personne::class);
    }

    /**
     * Undocumented function
     *
     * @return BelongsTo<ServiceAnnexe>
     */
    public function annexe(): BelongsTo
    {
        return $this->belongsTo(ServiceAnnexe::class);
    }

    /**
     * Undocumented function
     *
     * @return BelongsTo<Emplacement>
     */
    public function emplacement(): BelongsTo
    {
        return $this->belongsTo(Emplacement::class);
    }

    /**
     * Undocumented function
     *
     * @return HasMany<int, Collection<int, Facture>>
     */
    public function factures(): HasMany
    {
        return $this->hasMany(Facture::class);
    }

    /**
     * Undocumented function
     *
     * @return BelongsToMany<TypeEquipement>
     */
    public function equipements(): BelongsToMany
    {
        return $this->belongsToMany(TypeEquipement::class, 'contrats_type_equipements', 'contrat_id', 'type_equipement_id');
    }
}
